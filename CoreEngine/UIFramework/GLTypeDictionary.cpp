#pragma once
#include"stdafx.h"
#include"GLTypeDictionary.h"

//uniform type
const std::unordered_map<GLenum,std::string>	GLSL_TYPE_DICTIONARY =
{
	{GL_FLOAT, "float"},
	{GL_FLOAT_VEC2, "vec2"},
	{GL_FLOAT_VEC3, "vec3"},
	{GL_FLOAT_VEC4, "vec4"},
	{GL_DOUBLE, "double"},
	{GL_DOUBLE_VEC2, "dvec2"},
	{GL_DOUBLE_VEC3, "dvec3"},
	{GL_DOUBLE_VEC4, "dvec4"},
	{GL_INT, "int"},
	{GL_INT_VEC2, "ivec2"},
	{GL_INT_VEC3, "ivec3"},
	{GL_INT_VEC4, "ivec4"},
	{GL_UNSIGNED_INT, "unsigned int"},
	{GL_UNSIGNED_INT_VEC2, "uvec2"},
	{GL_UNSIGNED_INT_VEC3, "uvec3"},
	{GL_UNSIGNED_INT_VEC4, "uvec4"},
	{GL_BOOL, "bool"},
	{GL_BOOL_VEC2, "bvec2"},
	{GL_BOOL_VEC3, "bvec3"},
	{GL_BOOL_VEC4, "bvec4"},
	{GL_FLOAT_MAT2, "mat2"},
	{GL_FLOAT_MAT3, "mat3"},
	{GL_FLOAT_MAT4, "mat4"},
	{GL_FLOAT_MAT2x3, "mat2x3"},
	{GL_FLOAT_MAT2x4, "mat2x4"},
	{GL_FLOAT_MAT3x2, "mat3x2"},
	{GL_FLOAT_MAT3x4, "mat3x4"},
	{GL_FLOAT_MAT4x2, "mat4x2"},
	{GL_FLOAT_MAT4x3, "mat4x3"},
	{GL_DOUBLE_MAT2, "dmat2"},
	{GL_DOUBLE_MAT3, "dmat3"},
	{GL_DOUBLE_MAT4, "dmat4"},
	{GL_DOUBLE_MAT2x3, "dmat2x3"},
	{GL_DOUBLE_MAT2x4, "dmat2x4"},
	{GL_DOUBLE_MAT3x2, "dmat3x2"},
	{GL_DOUBLE_MAT3x4, "dmat3x4"},
	{GL_DOUBLE_MAT4x2, "dmat4x2"},
	{GL_DOUBLE_MAT4x3, "dmat4x3"},
	{GL_SAMPLER_1D, "sampler1D"},
	{GL_SAMPLER_2D, "sampler2D"},
	{GL_SAMPLER_3D, "sampler3D"},
	{GL_SAMPLER_CUBE, "samplerCube"},
	{GL_SAMPLER_1D_SHADOW, "sampler1DShadow"},
	{GL_SAMPLER_2D_SHADOW, "sampler2DShadow"},
	{GL_SAMPLER_1D_ARRAY, "sampler1DArray"},
	{GL_SAMPLER_2D_ARRAY, "sampler2DArray"},
	{GL_SAMPLER_1D_ARRAY_SHADOW, "sampler1DArrayShadow"},
	{GL_SAMPLER_2D_ARRAY_SHADOW, "sampler2DArrayShadow"},
	{GL_SAMPLER_2D_MULTISAMPLE, "sampler2DMS"},
	{GL_SAMPLER_2D_MULTISAMPLE_ARRAY, "sampler2DMSArray"},
	{GL_SAMPLER_CUBE_SHADOW, "samplerCubeShadow"},
	{GL_SAMPLER_BUFFER, "samplerBuffer"},
	{GL_SAMPLER_2D_RECT, "sampler2DRect"},
	{GL_SAMPLER_2D_RECT_SHADOW, "sampler2DRectShadow"},
	{GL_INT_SAMPLER_1D, "isampler1D"},
	{GL_INT_SAMPLER_2D, "isampler2D"},
	{GL_INT_SAMPLER_3D, "isampler3D"},
	{GL_INT_SAMPLER_CUBE, "isamplerCube"},
	{GL_INT_SAMPLER_1D_ARRAY, "isampler1DArray"},
	{GL_INT_SAMPLER_2D_ARRAY, "isampler2DArray"},
	{GL_INT_SAMPLER_2D_MULTISAMPLE, "isampler2DMS"},
	{GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "isampler2DMSArray"},
	{GL_INT_SAMPLER_BUFFER, "isamplerBuffer"},
	{GL_INT_SAMPLER_2D_RECT, "isampler2DRect"},
	{GL_UNSIGNED_INT_SAMPLER_1D, "usampler1D"},
	{GL_UNSIGNED_INT_SAMPLER_2D, "usampler2D"},
	{GL_UNSIGNED_INT_SAMPLER_3D, "usampler3D"},
	{GL_UNSIGNED_INT_SAMPLER_CUBE, "usamplerCube"},
	{GL_UNSIGNED_INT_SAMPLER_1D_ARRAY, "usampler2DArray"},
	{GL_UNSIGNED_INT_SAMPLER_2D_ARRAY, "usampler2DArray"},
	{GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE, "usampler2DMS"},
	{GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY, "usampler2DMSArray"},
	{GL_UNSIGNED_INT_SAMPLER_BUFFER, "usamplerBuffer"},
	{GL_UNSIGNED_INT_SAMPLER_2D_RECT, "usampler2DRect"},
	{GL_IMAGE_1D, "image1D"},
	{GL_IMAGE_2D, "image2D"},
	{GL_IMAGE_3D, "image3D"},
	{GL_IMAGE_2D_RECT, "image2DRect"},
	{GL_IMAGE_CUBE, "imageCube"},
	{GL_IMAGE_BUFFER, "imageBuffer"},
	{GL_IMAGE_1D_ARRAY, "image1DArray"},
	{GL_IMAGE_2D_ARRAY, "image2DArray"},
	{GL_IMAGE_2D_MULTISAMPLE, "image2DMS"},
	{GL_IMAGE_2D_MULTISAMPLE_ARRAY, "image2DMSArray"},
	{GL_INT_IMAGE_1D, "iimage1D"},
	{GL_INT_IMAGE_2D, "iimage2D"},
	{GL_INT_IMAGE_3D, "iimage3D"},
	{GL_INT_IMAGE_2D_RECT, "iimage2DRect"},
	{GL_INT_IMAGE_CUBE, "iimageCube"},
	{GL_INT_IMAGE_BUFFER, "iimageBuffer"},
	{GL_INT_IMAGE_1D_ARRAY, "iimage1DArray"},
	{GL_INT_IMAGE_2D_ARRAY, "iimage2DArray"},
	{GL_INT_IMAGE_2D_MULTISAMPLE, "iimage2DMS"},
	{GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "iimage2DMSArray"},
	{GL_UNSIGNED_INT_IMAGE_1D, "uimage1D"},
	{GL_UNSIGNED_INT_IMAGE_2D, "uimage2D"},
	{GL_UNSIGNED_INT_IMAGE_3D, "uimage3D"},
	{GL_UNSIGNED_INT_IMAGE_2D_RECT, "uimage2DRect"},
	{GL_UNSIGNED_INT_IMAGE_CUBE, "uimageCube"},
	{GL_UNSIGNED_INT_IMAGE_BUFFER, "uimageBuffer"},
	{GL_UNSIGNED_INT_IMAGE_1D_ARRAY, "uimage1DArray"},
	{GL_UNSIGNED_INT_IMAGE_2D_ARRAY, "uimage2DArray"},
	{GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE, "uimage2DMS"},
	{GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY, "uimage2DMSArray"},
	{GL_UNSIGNED_INT_ATOMIC_COUNTER, "atomic_uint"}
};

const std::unordered_map<GLenum,std::string>	OPENGL_TYPE_DICTIONARY =
{
	{GL_BYTE,"GL_BYTE"},
	{GL_UNSIGNED_BYTE,"GL_UNSIGNED_BYTE"},
	{GL_SHORT,"GL_SHORT"},
	{GL_UNSIGNED_SHORT,"GL_UNSIGNED_SHORT"},
	{GL_INT,"GL_INT"},
	{GL_UNSIGNED_INT,"GL_UNSIGNED_INT"},
	{GL_FIXED,"GL_FIXED"},
	{GL_HALF_FLOAT,"GL_HALF_FLOAT"},
	{GL_FLOAT,"GL_FLOAT"},
	{GL_DOUBLE,"GL_DOUBLE"}
};

const std::unordered_map<std::string, GLenum> ENUM_TYPE_FROMSTRING =
{
	{"GL_BYTE",GL_BYTE},
	{"GL_UNSIGNED_BYTE",GL_UNSIGNED_BYTE},
	{"GL_SHORT",GL_SHORT},
	{"GL_UNSIGNED_SHORT",GL_UNSIGNED_SHORT},
	{"GL_INT",GL_INT},
	{"GL_UNSIGNED_INT",GL_UNSIGNED_INT},
	{"GL_FIXED",GL_FIXED},
	{"GL_HALF_FLOAT",GL_HALF_FLOAT},
	{"GL_FLOAT",GL_FLOAT},
	{"GL_DOUBLE",GL_DOUBLE}
};

const std::unordered_map<std::string, size_t> SIZE_TYPE_FROMSTRING =
{
	{"GL_BYTE",sizeof(GLbyte)},
	{"GL_UNSIGNED_BYTE",sizeof(GLubyte)},
	{"GL_SHORT",sizeof(GLshort)},
	{"GL_UNSIGNED_SHORT",sizeof(GLushort)},
	{"GL_INT",sizeof(GLint)},
	{"GL_UNSIGNED_INT",sizeof(GLuint)},
	{"GL_FIXED",sizeof(GLfixed)},
	{"GL_HALF_FLOAT",sizeof(GLhalf)},
	{"GL_FLOAT",sizeof(GLfloat)},
	{"GL_DOUBLE",sizeof(GLdouble)}
};

const std::unordered_map<std::string, GLenum> GL_TEXTURE_TARGET_MAP = 
{
	{"GL_TEXTURE_1D",GL_TEXTURE_1D},
	{"GL_TEXTURE_1D_ARRAY",GL_TEXTURE_1D_ARRAY},
	{"GL_TEXTURE_2D",GL_TEXTURE_2D},
	{"GL_TEXTURE_2D_ARRAY",GL_TEXTURE_2D_ARRAY},
	{"GL_TEXTURE_2D_MULTISAMPLE",GL_TEXTURE_2D_MULTISAMPLE},
	{"GL_TEXTURE_2D_MULTISAMPLE_ARRAY",GL_TEXTURE_2D_MULTISAMPLE_ARRAY},
	{"GL_TEXTURE_3D",GL_TEXTURE_3D},
	{"GL_TEXTURE_CUBE_MAP",GL_TEXTURE_CUBE_MAP},
	{"GL_TEXTURE_CUBE_MAP_ARRAY",GL_TEXTURE_CUBE_MAP_ARRAY},
	{"GL_TEXTURE_RECTANGLE",GL_TEXTURE_RECTANGLE}
};

const std::unordered_map<std::string, GLenum> GL_TEXTURE_PNAME_MAP = 
{
	{"GL_DEPTH_STENCIL_TEXTURE_MODE",GL_DEPTH_STENCIL_TEXTURE_MODE},
	{"GL_TEXTURE_BASE_LEVEL",GL_TEXTURE_BASE_LEVEL},
	{"GL_TEXTURE_COMPARE_FUNC",GL_TEXTURE_COMPARE_FUNC},
	{"GL_TEXTURE_COMPARE_MODE",GL_TEXTURE_COMPARE_MODE},
	{"GL_TEXTURE_LOD_BIAS",GL_TEXTURE_LOD_BIAS},
	{"GL_TEXTURE_MIN_FILTER",GL_TEXTURE_MIN_FILTER},
	{"GL_TEXTURE_MAG_FILTER",GL_TEXTURE_MAG_FILTER},
	{"GL_TEXTURE_MIN_LOD",GL_TEXTURE_MIN_LOD},
	{"GL_TEXTURE_MAX_LOD",GL_TEXTURE_MAX_LOD},
	{"GL_TEXTURE_MAX_LEVEL",GL_TEXTURE_MAX_LEVEL},
	{"GL_TEXTURE_SWIZZLE_R",GL_TEXTURE_SWIZZLE_R},
	{"GL_TEXTURE_SWIZZLE_G",GL_TEXTURE_SWIZZLE_G},
	{"GL_TEXTURE_SWIZZLE_B",GL_TEXTURE_SWIZZLE_B},
	{"GL_TEXTURE_SWIZZLE_A",GL_TEXTURE_SWIZZLE_A},
	{"GL_TEXTURE_WRAP_S",GL_TEXTURE_WRAP_S},
	{"GL_TEXTURE_WRAP_T",GL_TEXTURE_WRAP_T},
	{"GL_TEXTURE_WRAP_R",GL_TEXTURE_WRAP_R},
	{"GL_TEXTURE_BORDER_COLOR",GL_TEXTURE_BORDER_COLOR},
	{"GL_TEXTURE_SWIZZLE_RGBA",GL_TEXTURE_SWIZZLE_RGBA}
};

const std::unordered_map<std::string, GLenum> GL_TEXTURE_PVALUE_MAP = 
{
	{"GL_LEQUAL",GL_LEQUAL},
	{"GL_GEQUAL",GL_GEQUAL},
	{"GL_LESS",GL_LESS},
	{"GL_GREATER",GL_GREATER},
	{"GL_EQUAL",GL_EQUAL},
	{"GL_NOTEQUAL",GL_NOTEQUAL},
	{"GL_ALWAYS",GL_ALWAYS},
	{"GL_NEVER",GL_NEVER},
	{"GL_COMPARE_REF_TO_TEXTURE",GL_COMPARE_REF_TO_TEXTURE},
	{"GL_NONE",GL_NONE},
	{"GL_TEXTURE_COMPARE_FUNCÂ ",GL_TEXTURE_COMPARE_FUNC},
	{"GL_MAX_TEXTURE_LOD_BIAS",GL_MAX_TEXTURE_LOD_BIAS},
	{"GL_NEAREST",GL_NEAREST},
	{"GL_LINEAR",GL_LINEAR},
	{"GL_NEAREST_MIPMAP_NEAREST",GL_NEAREST_MIPMAP_NEAREST},
	{"GL_LINEAR_MIPMAP_NEAREST",GL_LINEAR_MIPMAP_NEAREST},
	{"GL_NEAREST_MIPMAP_LINEAR",GL_NEAREST_MIPMAP_LINEAR},
	{"GL_LINEAR_MIPMAP_LINEAR",GL_LINEAR_MIPMAP_LINEAR},
	{"GL_RED",GL_RED},
	{"GL_GREEN",GL_GREEN},
	{"GL_BLUE",GL_BLUE},
	{"GL_ALPHA",GL_ALPHA},
	{"GL_ZERO",GL_ZERO},
	{"GL_ONE",GL_ONE},
	{"GL_CLAMP_TO_EDGE",GL_CLAMP_TO_EDGE},
	{"GL_CLAMP_TO_BORDER",GL_CLAMP_TO_BORDER},
	{"GL_MIRRORED_REPEAT",GL_MIRRORED_REPEAT},
	{"GL_REPEAT",GL_REPEAT},
	{"GL_MIRROR_CLAMP_TO_EDGE",GL_MIRROR_CLAMP_TO_EDGE}
};

const std::unordered_map<std::string, GL_TEXTURE_FUNC> GL_TEXTURE_FUNC_MAP =
{
	{"glTexParameterf",TEXT_PARAM_F},
	{"glTexParameteri",TEXT_PARAM_I},
	{"glTexParameterfv",TEXT_PARAM_FV},
	{"glTexParameteriv",TEXT_PARAM_IV},
	{"glTexParameterIiv",TEXT_PARAM_IIV},
	{"glTexParameterIuiv",TEXT_PARAM_IUIV},
	{"glTextureParameterf",TEXTURE_PARAM_F},
	{"glTextureParameteri",TEXTURE_PARAM_I},
	{"glTextureParameterfv",TEXTURE_PARAM_FV},
	{"glTextureParameteriv",TEXTURE_PARAM_IV},
	{"glTextureParameterIiv",TEXTURE_PARAM_IIV},
	{"glTextureParameterIuiv",TEXTURE_PARAM_IUIV}
};

const std::unordered_map<std::string, GLenum> GL_BUFFER_BINDING_TARGET_MAP =
{
	{"GL_ARRAY_BUFFER",GL_ARRAY_BUFFER},
	{"GL_ATOMIC_COUNTER_BUFFER",GL_ATOMIC_COUNTER_BUFFER},
	{"GL_COPY_READ_BUFFER",GL_COPY_READ_BUFFER},
	{"GL_COPY_WRITE_BUFFER",GL_COPY_WRITE_BUFFER},
	{"GL_DISPATCH_INDIRECT_BUFFER",GL_DISPATCH_INDIRECT_BUFFER},
	{"GL_DRAW_INDIRECT_BUFFER",GL_DRAW_INDIRECT_BUFFER},
	{"GL_ELEMENT_ARRAY_BUFFER",GL_ELEMENT_ARRAY_BUFFER},
	{"GL_PIXEL_PACK_BUFFER",GL_PIXEL_PACK_BUFFER},
	{"GL_PIXEL_UNPACK_BUFFER",GL_PIXEL_UNPACK_BUFFER},
	{"GL_QUERY_BUFFER",GL_QUERY_BUFFER},
	{"GL_SHADER_STORAGE_BUFFER",GL_SHADER_STORAGE_BUFFER},
	{"GL_TEXTURE_BUFFER",GL_TEXTURE_BUFFER},
	{"GL_TRANSFORM_FEEDBACK_BUFFER",GL_TRANSFORM_FEEDBACK_BUFFER},
	{"GL_UNIFORM_BUFFER",GL_UNIFORM_BUFFER}
};

const std::unordered_map<std::string, GLenum> GL_BUFFER_USAGE_MAP =
{
	{"GL_STREAM_DRAW", GL_STREAM_DRAW},
	{ "GL_STREAM_READ", GL_STREAM_READ },
	{ "GL_STREAM_COPY", GL_STREAM_COPY },
	{ "GL_STATIC_DRAW", GL_STATIC_DRAW },
	{ "GL_STATIC_READ", GL_STATIC_READ },
	{ "GL_STATIC_COPY", GL_STATIC_COPY },
	{ "GL_DYNAMIC_DRAW", GL_DYNAMIC_DRAW },
	{ "GL_DYNAMIC_READ", GL_DYNAMIC_READ },
	{ "GL_DYNAMIC_COPY", GL_DYNAMIC_COPY }
};

const std::unordered_map<std::string, GLenum> GL_PRIMITIVE_MAP =
{
	{"GL_POINTS",GL_POINTS},
	{"GL_LINE_STRIP",GL_LINE_STRIP},
	{"GL_LINE_LOOP",GL_LINE_LOOP},
	{"GL_LINES",GL_LINES},
	{"GL_LINE_STRIP_ADJACENCY",GL_LINE_STRIP_ADJACENCY},
	{"GL_LINES_ADJACENCY",GL_LINES_ADJACENCY},
	{"GL_TRIANGLE_STRIP",GL_TRIANGLE_STRIP},
	{"GL_TRIANGLE_FAN",GL_TRIANGLE_FAN},
	{"GL_TRIANGLES",GL_TRIANGLES},
	{"GL_TRIANGLE_STRIP_ADJACENCY",GL_TRIANGLE_STRIP_ADJACENCY},
	{"GL_TRIANGLES_ADJACENCY",GL_TRIANGLES_ADJACENCY},
	{"GL_PATCHES",GL_PATCHES}
};